<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[DOM事件]]></title>
      <url>http://lilyzff.htmhub.com/2016/10/10/DOM%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>1.操作DOM元素<br><a id="more"></a></p>
<h1 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h1><h2 id="1-dom对象的innerText和innerHTML有什么区别？"><a href="#1-dom对象的innerText和innerHTML有什么区别？" class="headerlink" title="1.dom对象的innerText和innerHTML有什么区别？"></a>1.dom对象的innerText和innerHTML有什么区别？</h2><p><strong>innerText</strong>是一个可写属性，返回元素内包含的文本内容，在多层次的时候会按照元素由浅到深的顺序拼接其内容;当写入新内容时会覆盖掉其内部所有内容，此时输入的内容为文本格式，即使有HTML标签也会当成文本<br><strong>innerHTML</strong>属性作用和innerText类似，但是不是返回元素的文本内容，而是返回元素的HTML结构，在写入的时候也会自动构建DOM<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;hello&lt;span&gt;hunger&lt;/span&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	var div=document.getElementsByTagName(&apos;div&apos;)[0];</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/innertext.png" alt="innertext.png"></p>
<h2 id="2-elem-children和elem-childNodes的区别？"><a href="#2-elem-children和elem-childNodes的区别？" class="headerlink" title="2.elem.children和elem.childNodes的区别？"></a>2.elem.children和elem.childNodes的区别？</h2><p>elem.children和elem.childNodes都是返回元素的直接子元素。</p>
<ul>
<li>elem.children只返回有标签的元素节点。</li>
<li><strong>elem.childNodes</strong>包括当前节点的所有子节点。除了HTML元素节点，该属性返回的还包括Text节点和Comment节点。</li>
</ul>
<h2 id="3-查询元素有几种常见的方法？"><a href="#3-查询元素有几种常见的方法？" class="headerlink" title="3.查询元素有几种常见的方法？"></a>3.查询元素有几种常见的方法？</h2><p>(1)、getElementById()，该方法返回匹配指定ID属性的元素节点。如果没有发现匹配的节点，则返回null。<br>(2)、getElementsByClassName()，该方法返回一个类似数组的对象（HTMLCollection类型的对象），包括了所有class名字符合指定条件的元素（搜索范围包括本身），元素的变化实时反映在返回结果中。这个方法不仅可以在document对象上调用，也可以在任何元素节点上调用。<br>(3)、getElementsByTagName()，该方法返回所有指定标签的元素（搜索范围包括本身）。返回值是一个HTMLCollection对象，也就是说，搜索结果是一个动态集合，任何元素的变化都会实时反映在返回的集合中。这个方法不仅可以在document对象上调用，也可以在任何元素节点上调用。<br>(4)、getElementsByName()，该方法用于选择拥有name属性的HTML元素<br>(5)、querySelector()，该方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。<br>(6)、querySelectorAll()，该方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。<br>(7)、elementFromPoint()，该方法返回位于页面指定位置的元素</p>
<h2 id="4-如何创建一个元素？如何给元素设置属性？"><a href="#4-如何创建一个元素？如何给元素设置属性？" class="headerlink" title="4.如何创建一个元素？如何给元素设置属性？"></a>4.如何创建一个元素？如何给元素设置属性？</h2><p><strong>创建元素：</strong>createElement方法用来生成HTML元素节点；createTextNode方法用来生成文本节点，参数为所要生成的文本节点的内容；<br><strong>设置属性：</strong>setAttribute()方法用于设置元素属性,里面传入两个值，第一个值为元素的属性，第二个值为定义的值。</p>
<h2 id="5-元素的添加、删除？"><a href="#5-元素的添加、删除？" class="headerlink" title="5.元素的添加、删除？"></a>5.元素的添加、删除？</h2><p><strong>元素的添加：</strong>appendChild()，在元素末尾添加元素；insertBefore()，在某个元素之前插入元素；replaceChild()，replaceChild()接受两个参数：要插入的元素和要替换的元素<br><strong>元素的删除：</strong>删除元素使用removeChild()方法即可</p>
<h2 id="6-DOM0-事件和DOM2级在事件监听使用方式上有什么区别？"><a href="#6-DOM0-事件和DOM2级在事件监听使用方式上有什么区别？" class="headerlink" title="6.DOM0 事件和DOM2级在事件监听使用方式上有什么区别？"></a>6.DOM0 事件和DOM2级在事件监听使用方式上有什么区别？</h2><ul>
<li>DOM0事件和DOM2级事件都是通过给元素节点注册特定事件处理程序（即事件监听器）来对事件进行处理；</li>
<li>DOM0 级事件处理程序不能添加多个事件处理程序，而DOM2 级事件处理程序可以</li>
<li>DOM2事件可以选择在捕获阶段还是冒泡阶段进行监听器触发，DOM0视浏览器设置而定；</li>
<li>IE9之前不支持DOM2级事件，而DOM0则跨浏览器且无兼容问题；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  //DOM0级事件</div><div class="line">document.querySelector(&apos;.btn&apos;).onclick=function(e)&#123;</div><div class="line">	console.log(&apos;DOM0级事件&apos;)</div><div class="line">&#125;;</div><div class="line">document.querySelector(&apos;#ct&apos;).onclick=function(e)&#123;</div><div class="line">	console.log(&apos;DOM0级事件 in ct&apos;)</div><div class="line">&#125;;</div><div class="line">//DOM2级事件</div><div class="line">document.querySelector(&apos;.btn&apos;).addEventListener(&apos;click&apos;,function()&#123;</div><div class="line">	console.log(&apos;DOM2级事件111&apos;)</div><div class="line">&#125;,true);</div><div class="line">document.querySelector(&apos;.btn&apos;).addEventListener(&apos;click&apos;,function()&#123;</div><div class="line">	console.log(&apos;DOM2级事件222&apos;)</div><div class="line">&#125;,true)</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<p><img src="http://lilyzff.htmhub.com/images/DOM2.png" alt="DOM2.png"></p>
<h2 id="7-attachEvent与addEventListener的区别？"><a href="#7-attachEvent与addEventListener的区别？" class="headerlink" title="7.attachEvent与addEventListener的区别？"></a>7.attachEvent与addEventListener的区别？</h2><ul>
<li><strong>参数个数不相同</strong>，addEventListener有三个参数，attachEvent只有两个，attachEvent添加的事件处理程序只能发生在冒泡阶段，addEventListener第三个参数可以决定添加的事件处理程序是在捕获阶段还是冒泡阶段处理（我们一般为了浏览器兼容性都设置为冒泡阶段）</li>
<li><strong>第一个参数意义不同</strong>，addEventListener第一个参数是事件类型（比如click，load），而attachEvent第一个参数指明的是事件处理函数名称（onclick，onload）</li>
<li><strong>事件处理程序的作用域不相同</strong>，addEventListener的作用域是元素本身，this是指的触发元素，而attachEvent事件处理程序会在全局变量内运行，this是window</li>
<li><strong>两者为一个事件添加多个事件处理程序时，执行顺序不同：</strong>attachEvent()添加多个事件处理程序时顺序无规律(添加的方法少的时候大多是按添加顺序的反顺序执行的，但是添加的多了就无规律了)；而addEventListener()添加多个事件处理程序时是按添加的先后顺序执行</li>
</ul>
<h2 id="8-解释IE事件冒泡和DOM2事件传播机制？"><a href="#8-解释IE事件冒泡和DOM2事件传播机制？" class="headerlink" title="8.解释IE事件冒泡和DOM2事件传播机制？"></a>8.解释IE事件冒泡和DOM2事件传播机制？</h2><p><strong>IE的事件冒泡：</strong>事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的元素<br><strong>DOM2事件传播机制：</strong>DOM2级事件规定事件流包括三个阶段，事件捕获阶段，处于目标阶段，事件冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，然后是实际目标接收事件，最后是冒泡阶段</p>
<h2 id="9-如何阻止事件冒泡？-如何阻止默认事件？"><a href="#9-如何阻止事件冒泡？-如何阻止默认事件？" class="headerlink" title="9.如何阻止事件冒泡？ 如何阻止默认事件？"></a>9.如何阻止事件冒泡？ 如何阻止默认事件？</h2><p><strong>阻止事件冒泡：</strong></p>
<ul>
<li>DOM事件对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* IE事件对象：```event.cancelBubble=true</div></pre></td></tr></table></figure></li>
</ul>
<p><strong>阻止默认事件：</strong></p>
<ul>
<li>DOM事件对象中：当cancelable属性为true时，可以使用event.preventDefault();</li>
<li>IE事件对象中：event.returnValue = false;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">   &lt;div id=&quot;ct&quot;&gt;</div><div class="line">    &lt;a href=&quot;&quot; class=&quot;btn&quot;&gt;点我&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	var ct=document.querySelector(&apos;#ct&apos;);</div><div class="line">	var btn=document.querySelector(&apos;.btn&apos;);</div><div class="line"></div><div class="line">	//DOM事件对象</div><div class="line">	btn.addEventListener(&apos;click&apos;,function(event)&#123;</div><div class="line">		console.log(&apos;in btn...&apos;);</div><div class="line">           event.stopPropagation();//取消事件进一步捕获或冒泡</div><div class="line">           event.preventDefault();//阻止默认事件</div><div class="line">	&#125;)；</div><div class="line">	ct.addEventListener(&apos;click&apos;,function()&#123;</div><div class="line">		console.log(&apos;in ct...&apos;)</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	//IE事件对象</div><div class="line">	btn.attachEvent(&apos;onclick&apos;,function(event)&#123;</div><div class="line">		console.log(&apos;in btn...&apos;);</div><div class="line">		event.cancelBubble=true;//取消事件冒泡</div><div class="line">           event.returnValue = false;//阻止默认事件</div><div class="line">	&#125;)</div><div class="line">	ct.attachEvent(&apos;onclick&apos;,function(event)&#123;</div><div class="line">		console.log(&apos;in ct...&apos;)</div><div class="line">	&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<p><img src="http://lilyzff.htmhub.com/images/stopPropagation.png" alt="stopPropagation.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>http://lilyzff.htmhub.com/2016/09/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>1.\d，\w,\s,[a-zA-Z0-9],\b,.,*,+,?,x{3},^$分别是什么?<br><a id="more"></a></p>
<h1 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h1><h2 id="1-d，-w-s-a-zA-Z0-9-b-x-3-分别是什么"><a href="#1-d，-w-s-a-zA-Z0-9-b-x-3-分别是什么" class="headerlink" title="1.\d，\w,\s,[a-zA-Z0-9],\b,.,*,+,?,x{3},^$分别是什么?"></a>1.\d，\w,\s,[a-zA-Z0-9],\b,.,*,+,?,x{3},^$分别是什么?</h2><ul>
<li>\d：数字字符，等价于[0-9]</li>
<li>\w：单词字符，字母、数字下划线，等价于[a-zA-Z_0-9]</li>
<li>\s： 空白符，等价于[\t\n\x0B\f\r]</li>
<li>\b：单词边界</li>
<li>.：    除了回车符和换行符之外的所有字符，等价于[^\r\n]    </li>
<li>*：出现零次或多次（任意次）</li>
<li>+：出现一次或多次（至少出现一次）</li>
<li>?：出现零次或一次（最多出现一次）</li>
<li>x{3}：x出现3次</li>
<li>^：    以xxx开头</li>
<li>$ :    以xxx结尾</li>
</ul>
<h2 id="2-贪婪模式和非贪婪模式指什么"><a href="#2-贪婪模式和非贪婪模式指什么" class="headerlink" title="2.贪婪模式和非贪婪模式指什么?"></a>2.贪婪模式和非贪婪模式指什么?</h2><ul>
<li>贪婪模式：指{n,m}、?、+、*这些在默认情况下都是尽最大可能匹配，直到下一个字符不满足匹配规则为止</li>
<li>非贪婪模式与贪婪模式相反，即尽可能少地匹配，在正则表达式的量词后面添加个“?”即可</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="1-写一个函数trim-str-，去除字符串两边的空白字符"><a href="#1-写一个函数trim-str-，去除字符串两边的空白字符" class="headerlink" title="1.写一个函数trim(str)，去除字符串两边的空白字符"></a>1.写一个函数trim(str)，去除字符串两边的空白字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function trim(str)&#123;</div><div class="line">	return str.replace(/^\s+|\s+$/g,&apos;&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/reg1.png" alt="reg1.png"></p>
<h2 id="2-使用实现-addClass-el-cls-、hasClass-el-cls-、removeClass-el-cls-，使用正则"><a href="#2-使用实现-addClass-el-cls-、hasClass-el-cls-、removeClass-el-cls-，使用正则" class="headerlink" title="2.使用实现 addClass(el, cls)、hasClass(el, cls)、removeClass(el,cls)，使用正则"></a>2.使用实现 addClass(el, cls)、hasClass(el, cls)、removeClass(el,cls)，使用正则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function hasClass(el,cls)&#123;</div><div class="line">    var reg = new RegExp(&apos;(\\s|^)&apos; + cls + &apos;(\\b|$)&apos;,&apos;g&apos;)</div><div class="line">    return reg.text(el.className)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function addClass(el, cls)&#123;</div><div class="line">	if(! hasClass(el,cls) )&#123;</div><div class="line">		return el.className + &apos;&apos; + cls</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function removeClass(el,cls)&#123;</div><div class="line">	if(hasClass(el,cls))&#123;</div><div class="line">		var reg = new RegExp(&apos;(\\s|^)&apos; + cls + &apos;(\\b|$)&apos;,&apos;g&apos;)</div><div class="line">		return  el.className.replace(reg,&apos;&apos;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-写一个函数isEmail-str-，判断用户输入的是不是邮箱"><a href="#3-写一个函数isEmail-str-，判断用户输入的是不是邮箱" class="headerlink" title="3.写一个函数isEmail(str)，判断用户输入的是不是邮箱"></a>3.写一个函数isEmail(str)，判断用户输入的是不是邮箱</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function isEmail(str)&#123;</div><div class="line">	var reg = /^[\w\.-]+@&#123;1&#125;[\w-]+\.[\w\.-]+$/;</div><div class="line">	return reg.test(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/reg2.png" alt="reg2.png"></p>
<h2 id="4-写一个函数isPhoneNum-str-，判断用户输入的是不是手机号"><a href="#4-写一个函数isPhoneNum-str-，判断用户输入的是不是手机号" class="headerlink" title="4.写一个函数isPhoneNum(str)，判断用户输入的是不是手机号"></a>4.写一个函数isPhoneNum(str)，判断用户输入的是不是手机号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function isPhoneNum(str)&#123;</div><div class="line">	return /^1[3-8]\d&#123;9&#125;$/.test(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/reg3.png" alt="reg3.png"></p>
<h2 id="5-写一个函数isValidUsername-str-，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）"><a href="#5-写一个函数isValidUsername-str-，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）" class="headerlink" title="5.写一个函数isValidUsername(str)，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）"></a>5.写一个函数isValidUsername(str)，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function isValidUsername(str)&#123;</div><div class="line">	return /^\w&#123;6,20&#125;$/.test(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/reg4.png" alt="reg4.png"></p>
<h2 id="6-写一个函数isValidPassword-str-判断用户输入的是不是合法密码（长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种）"><a href="#6-写一个函数isValidPassword-str-判断用户输入的是不是合法密码（长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种）" class="headerlink" title="6.写一个函数isValidPassword(str), 判断用户输入的是不是合法密码（长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种）"></a>6.写一个函数isValidPassword(str), 判断用户输入的是不是合法密码（长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function isValidPassword(str)&#123;</div><div class="line">	if(/(^[a-z]&#123;6,20&#125;$)|(^[A-Z]&#123;6,20&#125;$)|(^\d&#123;6,20&#125;$)|(^_&#123;6,20&#125;$)|(^\w&#123;0,5&#125;$)|(^\w&#123;21,&#125;$)/.test(str))&#123;</div><div class="line">		return &quot;长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种&quot;</div><div class="line">	&#125;</div><div class="line">	if(/^\w&#123;6,20&#125;$/.test(str))&#123;</div><div class="line">		return true</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/reg5.png" alt="reg5.png"></p>
<h2 id="7-写一个正则表达式，得到如下字符串里所有的颜色（-121212）"><a href="#7-写一个正则表达式，得到如下字符串里所有的颜色（-121212）" class="headerlink" title="7.写一个正则表达式，得到如下字符串里所有的颜色（#121212）"></a>7.写一个正则表达式，得到如下字符串里所有的颜色（#121212）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var re=/#[a-fA-F0-9]&#123;6&#125;/gi</div><div class="line"></div><div class="line">var subj = &quot;color: #121212; background-color: #AA00ef; width: 12px; bad-colors: f#fddee #fd2 &quot;</div><div class="line"></div><div class="line">alert( subj.match(re) )  // #121212,#AA00ef</div></pre></td></tr></table></figure>
<h2 id="8-下面代码输出什么-为什么-改写代码，让其输出hunger-world"><a href="#8-下面代码输出什么-为什么-改写代码，让其输出hunger-world" class="headerlink" title="8.下面代码输出什么? 为什么? 改写代码，让其输出hunger, world."></a>8.下面代码输出什么? 为什么? 改写代码，让其输出hunger, world.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &apos;hello  &quot;hunger&quot; , hello &quot;world&quot;&apos;;</div><div class="line">var pat =  /&quot;.*&quot;/g;</div><div class="line">str.match(pat);</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/reg6.png" alt="reg6.png"><br><strong>因为：</strong>匹配为最边上的””，是贪婪模式，可以通过加上？变为非贪婪模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &apos;hello  &quot;hunger&quot; , hello &quot;world&quot;&apos;;</div><div class="line">var pat =  /&quot;.*?&quot;/g;</div><div class="line">str.match(pat);</div></pre></td></tr></table></figure></p>
<p><img src="http://lilyzff.htmhub.com/images/reg7.png" alt="reg7.png"></p>
<h2 id="9-补全如下正则表达式，输出字符串中的注释内容-可尝试使用贪婪模式和非贪婪模式两种方法"><a href="#9-补全如下正则表达式，输出字符串中的注释内容-可尝试使用贪婪模式和非贪婪模式两种方法" class="headerlink" title="9.补全如下正则表达式，输出字符串中的注释内容. (可尝试使用贪婪模式和非贪婪模式两种方法)"></a>9.补全如下正则表达式，输出字符串中的注释内容. (可尝试使用贪婪模式和非贪婪模式两种方法)</h2><ul>
<li>非贪婪模式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str = &apos;.. &lt;!-- My -- comment \n test --&gt; ..  &lt;!----&gt; .. &apos;</div><div class="line">re = /&lt;!--[\w\W]*?--&gt;/g</div><div class="line">str.match(re)</div></pre></td></tr></table></figure>
<ul>
<li>贪婪模式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str = &apos;.. &lt;!-- My -- comment \n test --&gt; ..  &lt;!----&gt; .. &apos;</div><div class="line">re = /&lt;!--[^&gt;]*--&gt;/g</div><div class="line">str.match(re)</div></pre></td></tr></table></figure>
<h2 id="10-补全如下正则表达式"><a href="#10-补全如下正则表达式" class="headerlink" title="10.补全如下正则表达式"></a>10.补全如下正则表达式</h2><ul>
<li>非贪婪模式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var re = /&lt;[a-z].*?&gt;/g</div><div class="line">var str = &apos;&lt;&gt; &lt;a href=&quot;/&quot;&gt; &lt;input type=&quot;radio&quot; checked&gt; &lt;b&gt;&apos;</div><div class="line">str.match(re)</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/非贪婪模式.png" alt="非贪婪模式.png"></p>
<ul>
<li>贪婪模式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var re = /&lt;[^&gt;]+&gt;/g</div><div class="line">var str = &apos;&lt;&gt; &lt;a href=&quot;/&quot;&gt; &lt;input type=&quot;radio&quot; checked&gt; &lt;b&gt;&apos;</div><div class="line">str.match(re)</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/贪婪模式.png" alt="贪婪模式.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[闭包、定时器]]></title>
      <url>http://lilyzff.htmhub.com/2016/09/20/%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>1.什么是闭包? 有什么作用<br><a id="more"></a></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="1-什么是闭包-有什么作用"><a href="#1-什么是闭包-有什么作用" class="headerlink" title="1.什么是闭包? 有什么作用"></a>1.什么是闭包? 有什么作用</h2><p>JavaScript高级程序设计第三版定义<strong>闭包是指有权访问另一个函数作用域中的变量的函数。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function f1() &#123;</div><div class="line">  var n = 999;</div><div class="line">  function f2() &#123;</div><div class="line">    console.log(n);</div><div class="line">  &#125;</div><div class="line">  return f2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var result = f1();</div><div class="line">result(); // 999</div></pre></td></tr></table></figure></p>
<p>上面代码中，函数f1的返回值就是函数f2，由于f2可以读取f1的内部变量，所以就可以在外部获得f1的内部变量了。闭包就是函数f2，即能够读取其他函数内部变量的函数。由于在JavaScript语言中，只有函数内部的子函数才能读取内部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如f2记住了它诞生的环境f1，所以从f2可以得到f1的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。<br><strong>作用：</strong>1.可以读取函数内部的变量；2.让这些变量始终保持在内存中<br>参考：<a href="http://javascript.ruanyifeng.com/grammar/function.html#toc23" target="_blank" rel="external">闭包</a></p>
<h2 id="2-setTimeout-0-有什么作用"><a href="#2-setTimeout-0-有什么作用" class="headerlink" title="2.setTimeout 0 有什么作用"></a>2.setTimeout 0 有什么作用</h2><p>setTimeout(f, 0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。setTimeout(f, 0)可以调整事件的发生顺序。比如，网页开发中，某个事件先发生在子元素，然后冒泡到父元素，即子元素的事件回调函数，会早于父元素的事件回调函数触发。如果，我们先让父元素的事件回调函数先发生，就要用到setTimeout(f, 0)。<br>参考：<a href="http://javascript.ruanyifeng.com/advanced/timer.html" target="_blank" rel="external">定时器</a></p>
<h1 id="代码题"><a href="#代码题" class="headerlink" title="代码题"></a>代码题</h1><h2 id="１-下面的代码输出多少？修改代码让fnArri-输出-i。使用两种以上的方法"><a href="#１-下面的代码输出多少？修改代码让fnArri-输出-i。使用两种以上的方法" class="headerlink" title="１.下面的代码输出多少？修改代码让fnArri 输出 i。使用两种以上的方法"></a>１.下面的代码输出多少？修改代码让fnArr<a href="">i</a> 输出 i。使用<strong>两种以上的</strong>方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var fnArr = [];</div><div class="line">    for (var i = 0; i &lt; 10; i ++) &#123;</div><div class="line">        fnArr[i] =  function()&#123;</div><div class="line">            return i;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">console.log( fnArr[3]() );</div></pre></td></tr></table></figure>
<ul>
<li><p>方法一，赋值给立即执行函数，外部需要传递参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var fnArr = [];</div><div class="line">    for (var i = 0; i&lt;10; i++)&#123;</div><div class="line">    	fnArr[i] = (function(i)&#123;</div><div class="line">    		return function()&#123;</div><div class="line">    			return i</div><div class="line">    		&#125;</div><div class="line">    	&#125;(i))</div><div class="line">    &#125;</div><div class="line">console.log( fnArr[3]() );</div></pre></td></tr></table></figure>
</li>
<li><p>方法二，赋值给立即执行函数，声明一个临时变量存储i的值，外部不需要传参。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var fnArr = [];</div><div class="line">    for (var i = 0; i&lt;10; i++)&#123;</div><div class="line">    	fnArr[i] = (function(n)&#123;</div><div class="line">    		var n = i;</div><div class="line">    		return function()&#123;</div><div class="line">    			return n</div><div class="line">    		&#125;</div><div class="line">    	&#125;())</div><div class="line">    &#125;</div><div class="line">console.log( fnArr[3]() );</div></pre></td></tr></table></figure>
</li>
<li><p>方法三，把它绑定在函数上，作为函数的一部分，不需要通过闭包，得到函数就能得到值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var fnArr = []</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">  var fn = function() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  fn.idx = i</div><div class="line">  fnArr[i] = fn</div><div class="line">&#125;</div><div class="line">console.log(fnArr[3].idx)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-使用闭包封装一个汽车对象，可以通过如下方式获取汽车状态"><a href="#2-使用闭包封装一个汽车对象，可以通过如下方式获取汽车状态" class="headerlink" title="2.使用闭包封装一个汽车对象，可以通过如下方式获取汽车状态"></a>2.使用闭包封装一个汽车对象，可以通过如下方式获取汽车状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var Car = //todo;</div><div class="line">Car.setSpeed(30);</div><div class="line">Car.getSpeed(); //30</div><div class="line">Car.accelerate();</div><div class="line">Car.getSpeed(); //40;</div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.getSpeed(); //20</div><div class="line">Car.getStatus(); // &apos;running&apos;;</div><div class="line">Car.decelerate(); </div><div class="line">Car.decelerate();</div><div class="line">Car.getStatus();  //&apos;stop&apos;;</div><div class="line">//Car.speed;  //error</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var Car=(function ()&#123;</div><div class="line">	var speed = 0;</div><div class="line">	function setSpeed(num)&#123;</div><div class="line">		speed=num;</div><div class="line">	&#125;</div><div class="line">	function getSpeed()&#123;</div><div class="line">		console.log(speed)</div><div class="line">	&#125;</div><div class="line">	function accelerate()&#123;</div><div class="line">		speed + =10;</div><div class="line">	&#125;</div><div class="line">	function decelerate(k)&#123;</div><div class="line">		speed - =10;</div><div class="line">	&#125;</div><div class="line">	function getStatus()&#123;</div><div class="line">		if(speed&gt;0)&#123;</div><div class="line">			console.log(&apos;running&apos;)</div><div class="line">		&#125;else&#123;</div><div class="line">			console.log(&apos;stop&apos;)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return &#123;</div><div class="line">		setSpeed:setSpeed,</div><div class="line">		getSpeed:getSpeed,</div><div class="line">		accelerate:accelerate,</div><div class="line">		decelerate:decelerate,</div><div class="line">	    getStatus:getStatus</div><div class="line">	&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/time3.png" alt="time3.png"></p>
<h2 id="3-写一个函数使用setTimeout模拟setInterval的功能"><a href="#3-写一个函数使用setTimeout模拟setInterval的功能" class="headerlink" title="3.写一个函数使用setTimeout模拟setInterval的功能"></a>3.写一个函数使用setTimeout模拟setInterval的功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var i=0;</div><div class="line">function intv()&#123;</div><div class="line">	setTimeout(function()&#123;</div><div class="line">		console.log(i++);</div><div class="line">		intv();</div><div class="line">	&#125;,1000)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/time1.png" alt="time1.png"></p>
<h2 id="4-写一个函数，计算setTimeout平均-备注：新加-最小时间粒度"><a href="#4-写一个函数，计算setTimeout平均-备注：新加-最小时间粒度" class="headerlink" title="4.写一个函数，计算setTimeout平均[备注：新加]最小时间粒度"></a>4.写一个函数，计算setTimeout平均[备注：新加]最小时间粒度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function getMint()&#123;</div><div class="line">	var i=0</div><div class="line">	var start = Date.now()</div><div class="line">	var clock = setTimeout(function()&#123;</div><div class="line">		i++;</div><div class="line">		if(i=== 1000)&#123;</div><div class="line">			clearTimeout(clock)</div><div class="line">			var end = Date.now()</div><div class="line">			console.log((end-start)/i)</div><div class="line">		&#125;</div><div class="line">		clock = setTimeout(arguments.callee,0)</div><div class="line">	&#125;,0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-下面这段代码输出结果是-为什么"><a href="#5-下面这段代码输出结果是-为什么" class="headerlink" title="5.下面这段代码输出结果是? 为什么?"></a>5.下面这段代码输出结果是? 为什么?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">setTimeout(function()&#123;</div><div class="line">    a = 2;</div><div class="line">    console.log(a);</div><div class="line">&#125;, 0);</div><div class="line">var a ;</div><div class="line">console.log(a);</div><div class="line">a = 3;</div><div class="line">console.log(a);</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/time2.png" alt="time2.png"></p>
<p><strong>原因：</strong>必须要等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行setTimeout指定的任务，所以最后输出2。</p>
<h2 id="6-下面这段代码输出结果是-为什么"><a href="#6-下面这段代码输出结果是-为什么" class="headerlink" title="6.下面这段代码输出结果是? 为什么?"></a>6.下面这段代码输出结果是? 为什么?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var flag = true;</div><div class="line">setTimeout(function()&#123;</div><div class="line">    flag = false;</div><div class="line">&#125;,0)</div><div class="line">while(flag)&#123;&#125;</div><div class="line">console.log(flag);</div></pre></td></tr></table></figure>
<p>没有输出。因为while判断为真，flag为true,为死循环，setTimeout是执行完其他代码后才执行，所以无限循环，没有输出。</p>
<h2 id="7-下面这段代码输出？如何输出delayer-0-delayer-1…（使用闭包来实现）"><a href="#7-下面这段代码输出？如何输出delayer-0-delayer-1…（使用闭包来实现）" class="headerlink" title="7.下面这段代码输出？如何输出delayer: 0, delayer:1…（使用闭包来实现）"></a>7.下面这段代码输出？如何输出delayer: 0, delayer:1…（使用闭包来实现）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for(var i=0;i&lt;5;i++)&#123;</div><div class="line">    setTimeout(function()&#123;</div><div class="line">         console.log(&apos;delayer:&apos; + i );</div><div class="line">    &#125;, 0);//setTimeout函数最后执行，此时i已经为5，for每循环一次，setTimeout都要执行一次，只不过它是等到所有的代码执行完了再执行，所以最后一共输出五个delayer: 5</div><div class="line">    console.log(i);//输出0,1,2,3,4</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">for(var i=0;i&lt;5;i++)&#123;</div><div class="line">    (function()&#123;</div><div class="line">    	var n = i;</div><div class="line">    	setTimeout(function()&#123;</div><div class="line">         console.log(&apos;delayer:&apos; + n );</div><div class="line">    &#125;, 0);</div><div class="line">    	console.log(n);</div><div class="line">    &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[时间对象、引用类型]]></title>
      <url>http://lilyzff.htmhub.com/2016/09/18/%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>1.基础类型、复杂类型有哪些？有什么特征？<br><a id="more"></a></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="1-基础类型有哪些？复杂类型有哪些？有什么特征？"><a href="#1-基础类型有哪些？复杂类型有哪些？有什么特征？" class="headerlink" title="1.基础类型有哪些？复杂类型有哪些？有什么特征？"></a>1.基础类型有哪些？复杂类型有哪些？有什么特征？</h2><p><strong>基本类型：</strong>有数值、布尔值、null和undefined<br><strong>特征：</strong>基础类型是保存在栈内存中的简单数据段，它是按值访问，操作的是它们实际保存的值；基本类型从一个变量向一个变量复制时，会在栈中创建一个新值，然后把值复制到为新变量分配的位置上。<br><strong>复杂类型：</strong>有对象、数组、函数、正则<br><strong>特征：</strong>复杂类型指的是那些保存在堆内存中的对象，变量中保存的实际上只是一个指针，这个指针执行内存中的另一个位置，由该位置保存对象；</p>
<p>##２如下代码的输出? 为什么?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;a:1, b:2&#125;;</div><div class="line">var obj2 = &#123;a:1, b:2&#125;;</div><div class="line">console.log(obj1 == obj2);</div><div class="line">console.log(obj1 = obj2);</div><div class="line">console.log(obj1 == obj2);</div></pre></td></tr></table></figure></p>
<p>输出结果及原因：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;a:1, b:2&#125;;</div><div class="line">var obj2 = &#123;a:1, b:2&#125;;</div><div class="line">console.log(obj1 == obj2);//false,虽然obj1与obj2内容相同，但是它们是不同的对象，指向的地址不同，所以输出false</div><div class="line">console.log(obj1 = obj2);//Object &#123;a: 1, b: 2&#125;，obj2复制给obj1，因为它们是引用类型，指向同一地址，所以输出Object &#123;a: 1, b: 2&#125;</div><div class="line">console.log(obj1 == obj2);true，指向同一地址，所以输出true</div></pre></td></tr></table></figure></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="1、写一个函数getIntv，获取从当前时间到指定日期的间隔时间"><a href="#1、写一个函数getIntv，获取从当前时间到指定日期的间隔时间" class="headerlink" title="1、写一个函数getIntv，获取从当前时间到指定日期的间隔时间"></a>1、写一个函数getIntv，获取从当前时间到指定日期的间隔时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = getIntv(&quot;2016-01-08&quot;);</div><div class="line">console.log(str);</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function getIntv(val)&#123;</div><div class="line">	var timeline = Date.parse(val) - Date.now();</div><div class="line">	var day = Math.floor(timeline/(24*60*60*1000));</div><div class="line">	var hour = Math.floor((timeline - day*24*60*60*1000)/(60*60*1000));</div><div class="line">	var minute = Math.floor((timeline - day*24*60*60*1000 - hour*60*60*1000)/(60*1000));</div><div class="line">    var second = Math.floor((timeline - day*24*60*60*1000 - hour*60*60*1000 - minute*60*1000)/1000)</div><div class="line">    return &apos;距离国庆还有&apos; + day + &apos;天&apos; + hour + &apos;小时&apos; + minute + &apos;分钟&apos; + second + &apos;秒&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/date1.png" alt="date1.png"></p>
<p>##　2、把数字日期改成中文日期<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = getChsDate(&apos;2015-01-08&apos;);</div><div class="line">console.log(str);  // 二零一五年一月八日</div></pre></td></tr></table></figure></p>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function changeZh(str)&#123;</div><div class="line">      str+=&apos;&apos;;</div><div class="line">      var days = [&apos;零&apos;,&apos;一&apos;,&apos;二&apos;,&apos;三&apos;,&apos;四&apos;,&apos;五&apos;,&apos;六&apos;,&apos;七&apos;,&apos;八&apos;,&apos;九&apos;,&apos;十&apos;];</div><div class="line">      var outstr=&apos;&apos;;</div><div class="line">      for(var i=0;i&lt;str.length;i++)&#123;</div><div class="line">         outstr+= days[(str[i])];</div><div class="line">       &#125;</div><div class="line">     return outstr;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"> function getChsdate(datestr)&#123;</div><div class="line">   var d= new Date(datestr);</div><div class="line">   return changeZh(d.getFullYear())+&apos;年&apos;+changeZh(d.getMonth()+1)+&apos;月&apos;+changeZh(d.getDate())+&apos;日&apos;;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">console.log(getChsdate(&apos;2016-09-12&apos;))</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/date2.png" alt="date2.png"></p>
<h2 id="3-写一个函数获取n天前的日期"><a href="#3-写一个函数获取n天前的日期" class="headerlink" title="3.写一个函数获取n天前的日期"></a>3.写一个函数获取n天前的日期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var lastWeek =  getLastNDays(7); // ‘2016-01-08’</div><div class="line">var lastMonth = getLastNDays(30); //&apos;2015-12-15&apos;</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function getLastNDays(val)&#123;</div><div class="line">	var getDay = [];</div><div class="line">	var date = new Date(Date.now() - val*24*60*60*1000);</div><div class="line">    getDay[0] = date.getFullYear();</div><div class="line">    getDay[1] = date.getMonth()+1;</div><div class="line">    getDay[2] = date.getDate();</div><div class="line">    return getDay.join(&apos;-&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/date3.png" alt="date3.png"></p>
<p>##　4、完善如下代码，用于获取执行时间如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var Runtime = (function()&#123;</div><div class="line">    var t1,t2</div><div class="line">    var obj = &#123;</div><div class="line">        start: function()&#123;</div><div class="line">            t1=Date.now();</div><div class="line">        &#125;,</div><div class="line">        end: function()&#123;</div><div class="line">            t2=Date.now();</div><div class="line">        &#125;,</div><div class="line">        get: function()&#123;</div><div class="line">            return t2-t1</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">return obj;</div><div class="line">&#125;());</div><div class="line">Runtime.start();</div><div class="line">for(var i=0;i&lt;1000;i++)&#123;</div><div class="line">	console.log(1)</div><div class="line">&#125;</div><div class="line">Runtime.end();</div><div class="line">console.log(  Runtime.get() );</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/date4.png" alt="date4.png"></p>
<h2 id="5-楼梯有200级，每次走1级或是2级，从底走到顶一共有多少种走法？用代码（递归）实现"><a href="#5-楼梯有200级，每次走1级或是2级，从底走到顶一共有多少种走法？用代码（递归）实现" class="headerlink" title="5.楼梯有200级，每次走1级或是2级，从底走到顶一共有多少种走法？用代码（递归）实现"></a>5.楼梯有200级，每次走1级或是2级，从底走到顶一共有多少种走法？用代码（递归）实现</h2><p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function steps(n)&#123;</div><div class="line">	if(n&lt;3&amp;&amp;n&gt;0)&#123;</div><div class="line">		return n;</div><div class="line">	&#125;else&#123;</div><div class="line">		return steps(n-1)+steps(n-2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/date5.png" alt="date5.png"></p>
<h2 id="6-写一个json对象深拷贝的方法，json对象可以多层嵌套，值可以是字符串、数字、布尔、json对象中的任意项"><a href="#6-写一个json对象深拷贝的方法，json对象可以多层嵌套，值可以是字符串、数字、布尔、json对象中的任意项" class="headerlink" title="6.写一个json对象深拷贝的方法，json对象可以多层嵌套，值可以是字符串、数字、布尔、json对象中的任意项"></a>6.写一个json对象深拷贝的方法，json对象可以多层嵌套，值可以是字符串、数字、布尔、json对象中的任意项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var json = &#123;</div><div class="line">             &quot;name&quot;: &quot;xiaohong&quot;,</div><div class="line">             &quot;age&quot;: 16,</div><div class="line">             &quot;sex&quot;: &quot;female&quot;,</div><div class="line">             &quot;address&quot;: </div><div class="line">              &#123;</div><div class="line">                 &quot;streetAddress&quot;: &quot;84 Charlie Street&quot;,</div><div class="line">                 &quot;city&quot;: &quot;shanghai&quot;,</div><div class="line">                 &quot;state&quot;: &quot;NY&quot;,</div><div class="line">                 &quot;postalCode&quot;: &quot;10021&quot;</div><div class="line">              &#125;,</div><div class="line">             &quot;feature&quot;: [&#123;&quot;height&quot;:&quot;163cm&quot;&#125;,&#123;&quot;weight&quot;:&quot;45kg&quot;&#125;]</div><div class="line">        &#125;</div><div class="line">function jsonCopy(json)&#123;</div><div class="line">   var newjson=&#123;&#125;;</div><div class="line">   for(var key in json)&#123;</div><div class="line">     if (typeof(json[key])===&quot;object&quot;) &#123;</div><div class="line">        newjson[key]=jsonCopy( json[key] );</div><div class="line">     &#125;else&#123;</div><div class="line">        newjson[key]=json[key];</div><div class="line">     &#125;       </div><div class="line">   &#125;</div><div class="line">    return newjson;</div><div class="line">&#125;</div><div class="line">jsonCopy(json);</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/date6.png" alt="date5.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数组、字符串、数学函数]]></title>
      <url>http://lilyzff.htmhub.com/2016/09/07/%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p>1.数组方法里push、pop、shift、unshift、join、split分别是什么作用<br><a id="more"></a></p>
<h1 id="数组、字符串、数学函数"><a href="#数组、字符串、数学函数" class="headerlink" title="数组、字符串、数学函数"></a>数组、字符串、数学函数</h1><h1 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h1><h2 id="1-数组方法里push、pop、shift、unshift、join、split分别是什么作用。"><a href="#1-数组方法里push、pop、shift、unshift、join、split分别是什么作用。" class="headerlink" title="1.数组方法里push、pop、shift、unshift、join、split分别是什么作用。"></a>1.数组方法里push、pop、shift、unshift、join、split分别是什么作用。</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>push</td>
<td>push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。</td>
</tr>
<tr>
<td>pop</td>
<td>pop()方法则从数组末尾移除最后一项，减少数组的length 值，然后返回移除的项。</td>
</tr>
<tr>
<td>shift</td>
<td>它能够移除数组中的第一个项并返回该项，同时将数组长度减1</td>
</tr>
<tr>
<td>unshift</td>
<td>它能在数组前端添加任意个项并返回新数组的长度</td>
</tr>
<tr>
<td>join</td>
<td>只接收一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串</td>
</tr>
<tr>
<td>split</td>
<td>这个方法可以基于指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个数组中</td>
</tr>
</tbody>
</table>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="用-splice-实现-push、pop、shift、unshift方法"><a href="#用-splice-实现-push、pop、shift、unshift方法" class="headerlink" title="用 splice 实现 push、pop、shift、unshift方法"></a>用 splice 实现 push、pop、shift、unshift方法</h2><p>push方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function push(arr,val)&#123;</div><div class="line">     arr.splice(arr.length,0,val);</div><div class="line">     return arr.length;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>pop方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function pop(arr)&#123;</div><div class="line">     return arr.splice(arr.length-1,1)[0];</div><div class="line">&#125;</div><div class="line">//之所以加个索引值0，是为了和pop的返回值相同，因为splice删除时返回的是删除元素（数组形式），此时这里只有一个元素，所以索引值为0的元素就是删除的元素。</div></pre></td></tr></table></figure></p>
<p>shift方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function shift()&#123;</div><div class="line">	return arr.splice(0,1)[0]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>unshift方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function unshift(arr)&#123;</div><div class="line">	for(var i = arguments.length -1;i &gt;= 1;i--)&#123;</div><div class="line">     arr.splice(0,0,arguments[i]);</div><div class="line"> &#125;</div><div class="line"> return arr.length;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用数组拼接出如下字符串"><a href="#使用数组拼接出如下字符串" class="headerlink" title="使用数组拼接出如下字符串"></a>使用数组拼接出如下字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var prod = &#123;</div><div class="line">    name: &apos;女装&apos;,</div><div class="line">    styles: [&apos;短款&apos;, &apos;冬季&apos;, &apos;春装&apos;]</div><div class="line">&#125;;</div><div class="line">function getTpl(data)&#123;</div><div class="line">//todo...</div><div class="line">&#125;;</div><div class="line">var result = getTplStr(prod);  //result为下面的字符串</div><div class="line">&lt;dl class=&quot;product&quot;&gt;</div><div class="line">    &lt;dt&gt;女装&lt;/dt&gt;</div><div class="line">    &lt;dd&gt;短款&lt;/dd&gt;</div><div class="line">    &lt;dd&gt;冬季&lt;/dd&gt;</div><div class="line">    &lt;dd&gt;春装&lt;/dd&gt;</div><div class="line">&lt;/dl&gt;</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function getTpl(data)&#123;</div><div class="line">    var htmls=[];</div><div class="line">    htmls.push(&apos;&lt;dl class=&quot;product&quot;&gt;&apos;);</div><div class="line">    htmls.push(&apos;&lt;dt&gt;&apos;+data.name+&apos;&lt;/dt&gt;&apos;);</div><div class="line">    for (var i = 0; i &lt; data.styles.length; i++) &#123;</div><div class="line">            htmls.push(&apos;&lt;dd&gt;&apos; + data.styles[i] + &apos;&lt;/dd&gt;&apos;);</div><div class="line">        &#125;;</div><div class="line">    htmls.push(&apos;&lt;/dl&gt;&apos;);</div><div class="line">    console.log(htmls.join(&apos;&apos;));</div><div class="line">&#125;;</div><div class="line">getTpl(prod);</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/array1.png" alt="array1.png"></p>
<h2 id="写一个find函数，实现下面的功能"><a href="#写一个find函数，实现下面的功能" class="headerlink" title="写一个find函数，实现下面的功能"></a>写一个find函数，实现下面的功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [ &quot;test&quot;, 2, 1.5, false ]</div><div class="line">find(arr, &quot;test&quot;) // 0</div><div class="line">find(arr, 2) // 1</div><div class="line">find(arr, 0) // -1</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function find(arr,val)&#123;</div><div class="line">	return console.log(arr.insexOf(val))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/array2.png" alt="array2.png"></p>
<h2 id="写一个函数filterNumeric，把数组-arr-中的数字过滤出来赋值给新数组newarr，-原数组arr不变"><a href="#写一个函数filterNumeric，把数组-arr-中的数字过滤出来赋值给新数组newarr，-原数组arr不变" class="headerlink" title="写一个函数filterNumeric，把数组 arr 中的数字过滤出来赋值给新数组newarr， 原数组arr不变"></a>写一个函数filterNumeric，把数组 arr 中的数字过滤出来赋值给新数组newarr， 原数组arr不变</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = [&quot;a&quot;, &quot;b&quot;, 1, 3, 5, &quot;b&quot;, 2];</div><div class="line">newarr = filterNumeric(arr);  //   [1,3,5,2]</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr = [&quot;a&quot;, &quot;b&quot;, 1, 3, 5, &quot;b&quot;, 2];</div><div class="line">var newarr=arr.filter(function filterNumeric(e)&#123;</div><div class="line">	return typeof e===&apos;number&apos;</div><div class="line">&#125;);</div><div class="line">console.log(newarr);</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/array3.png" alt="array3.png"></p>
<h2 id="对象obj有个className属性，里面的值为的是空格分割的字符串-和html元素的class特性类似-，写addClass、removeClass函数，有如下功能："><a href="#对象obj有个className属性，里面的值为的是空格分割的字符串-和html元素的class特性类似-，写addClass、removeClass函数，有如下功能：" class="headerlink" title="对象obj有个className属性，里面的值为的是空格分割的字符串(和html元素的class特性类似)，写addClass、removeClass函数，有如下功能："></a>对象obj有个className属性，里面的值为的是空格分割的字符串(和html元素的class特性类似)，写addClass、removeClass函数，有如下功能：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">  className: &apos;open menu&apos;</div><div class="line">&#125;</div><div class="line">addClass(obj, &apos;new&apos;) // obj.className=&apos;open menu new&apos;</div><div class="line">addClass(obj, &apos;open&apos;)  // 因为open已经存在，所以不会再次添加open</div><div class="line">addClass(obj, &apos;me&apos;) // me不存在，所以 obj.className变为&apos;open menu new me&apos;</div><div class="line">console.log(obj.className)  // &quot;open menu new me&quot;</div><div class="line"></div><div class="line">removeClass(obj, &apos;open&apos;) // 去掉obj.className里面的 open，变成&apos;menu new me&apos;</div><div class="line">removeClass(obj, &apos;blabla&apos;)  // 因为blabla不存在，所以此操作无任何影响</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">  className: &apos;open menu&apos;</div><div class="line">&#125;</div><div class="line">function addClass(obj,val)&#123;</div><div class="line">	var arr=obj.className.split(&apos; &apos;);</div><div class="line">	for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">		if(arr[i]===val)&#123;</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		arr.push(val);</div><div class="line">		obj.className=arr.join(&apos; &apos;);</div><div class="line">		return obj;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">function removeClass(obj,val)&#123;</div><div class="line">	var arr=obj.className.split(&apos; &apos;);</div><div class="line">	for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">		if(arr[i]===val)&#123;</div><div class="line">			arr.splice([i],1)</div><div class="line">		&#125;</div><div class="line">		obj.className=arr.join(&apos; &apos;);</div><div class="line">		return obj;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/array4.png" alt="array4.png"></p>
<h2 id="写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如"><a href="#写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如" class="headerlink" title="写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如"></a>写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">camelize(&quot;background-color&quot;) == &apos;backgroundColor&apos;</div><div class="line">camelize(&quot;list-style-image&quot;) == &apos;listStyleImage&apos;</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function camelize(str)&#123;</div><div class="line">	var arr=str.split(&apos;-&apos;);</div><div class="line">	return arr.join(&apos;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/str1.png" alt="str1.png"></p>
<h2 id="如下代码输出什么？为什么"><a href="#如下代码输出什么？为什么" class="headerlink" title="如下代码输出什么？为什么?"></a>如下代码输出什么？为什么?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = [&quot;a&quot;, &quot;b&quot;];</div><div class="line">arr.push( function() &#123; alert(console.log(&apos;hello hunger valley&apos;)) &#125; );</div><div class="line">arr[arr.length-1]()</div></pre></td></tr></table></figure>
<p>原因：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">弹窗显示 undefined,控制台显示 hello hunger valley</div><div class="line">arr = [&quot;a&quot;, &quot;b&quot;];//声明arr，并赋值</div><div class="line">arr.push( function() &#123; alert(console.log(&apos;hello hunger valley&apos;)) &#125; );//push方法将function() &#123; alert(console.log(&apos;hello hunger valley&apos;)) &#125;推入arr数组，并作为arr数组的最后一个元素</div><div class="line">arr[arr.length-1]()//调用匿名函数第三项，并执行alert(console.log(&apos;hello hunger valley&apos;))，console.log(&apos;hello hunger valley&apos;)返回类型是undefined，所以弹出undefined</div></pre></td></tr></table></figure></p>
<h2 id="写一个函数filterNumericInPlace，过滤数组中的数字，删除非数字。要求在原数组上操作"><a href="#写一个函数filterNumericInPlace，过滤数组中的数字，删除非数字。要求在原数组上操作" class="headerlink" title="写一个函数filterNumericInPlace，过滤数组中的数字，删除非数字。要求在原数组上操作"></a>写一个函数filterNumericInPlace，过滤数组中的数字，删除非数字。要求在原数组上操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = [&quot;a&quot;, &quot;b&quot;, 1, 3, 4, 5, &quot;b&quot;, 2];</div><div class="line">//对原数组进行操作，不需要返回值</div><div class="line">filterNumericInPlace(arr);</div><div class="line">console.log(arr)  // [1,3,4,5,2]</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function filterNumericInPlace(arr)&#123;</div><div class="line">	for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">		if(typeof arr[i] !==&apos;number&apos;)&#123;</div><div class="line">			arr.splice(i,1);</div><div class="line">			i--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/array5.png" alt="array5.png"></p>
<h2 id="写一个ageSort函数实现数组中对象按age从小到大排序"><a href="#写一个ageSort函数实现数组中对象按age从小到大排序" class="headerlink" title="写一个ageSort函数实现数组中对象按age从小到大排序"></a>写一个ageSort函数实现数组中对象按age从小到大排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var john = &#123; name: &quot;John Smith&quot;, age: 23 &#125;</div><div class="line">var mary = &#123; name: &quot;Mary Key&quot;, age: 18 &#125;</div><div class="line">var bob = &#123; name: &quot;Bob-small&quot;, age: 6 &#125;</div><div class="line">var people = [ john, mary, bob ]</div><div class="line">ageSort(people) // [ bob, mary, john ]</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function ageSort(val)&#123;</div><div class="line">	val.sort(function(a,b)&#123;</div><div class="line">		return a.age-b.age</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下:</p>
<p><img src="http://lilyzff.htmhub.com/images/array6.png" alt="array6.png"></p>
<h2 id="写一个filter-arr-func-函数用于过滤数组，接受两个参数，第一个是要处理的数组，第二个参数是回调函数-回调函数遍历接受每一个数组元素，当函数返回true时保留该元素，否则删除该元素-。实现如下功能："><a href="#写一个filter-arr-func-函数用于过滤数组，接受两个参数，第一个是要处理的数组，第二个参数是回调函数-回调函数遍历接受每一个数组元素，当函数返回true时保留该元素，否则删除该元素-。实现如下功能：" class="headerlink" title="写一个filter(arr, func) 函数用于过滤数组，接受两个参数，第一个是要处理的数组，第二个参数是回调函数(回调函数遍历接受每一个数组元素，当函数返回true时保留该元素，否则删除该元素)。实现如下功能："></a>写一个filter(arr, func) 函数用于过滤数组，接受两个参数，第一个是要处理的数组，第二个参数是回调函数(回调函数遍历接受每一个数组元素，当函数返回true时保留该元素，否则删除该元素)。实现如下功能：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function isNumeric (el)&#123;</div><div class="line">    return typeof el === &apos;number&apos;; </div><div class="line">&#125;</div><div class="line">arr = [&quot;a&quot;,3,4,true, -1, 2, &quot;b&quot;]</div><div class="line"></div><div class="line">arr = filter(arr, isNumeric) ; // arr = [3,4,-1, 2],  过滤出数字</div><div class="line">arr = filter(arr, function(val) &#123; return  typeof val === &quot;number&quot; &amp;&amp; val &gt; 0 &#125;);  // arr = [3,4,2] 过滤出大于0的整数</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">arr = [&quot;a&quot;,3,4,true, -1, 2, &quot;b&quot;]</div><div class="line">function filter(arr,func)&#123;</div><div class="line">	arr2=arr.filter(func);</div><div class="line">	return arr2;</div><div class="line">&#125;</div><div class="line">function isNumeric (el)&#123;</div><div class="line">    return typeof el === &apos;number&apos;; </div><div class="line">&#125;</div><div class="line">filter(arr,isNumeric);</div><div class="line">filter(arr,function(val) &#123; return  typeof val === &quot;number&quot; &amp;&amp; val &gt; 0 &#125;)</div></pre></td></tr></table></figure></p>
<p>输出结果如下:</p>
<p><img src="http://lilyzff.htmhub.com/images/array7.png" alt="array7.png"></p>
<h1 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h1><h2 id="写一个-ucFirst函数，返回第一个字母为大写的字符"><a href="#写一个-ucFirst函数，返回第一个字母为大写的字符" class="headerlink" title="写一个 ucFirst函数，返回第一个字母为大写的字符"></a>写一个 ucFirst函数，返回第一个字母为大写的字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ucFirst(&quot;hunger&quot;) == &quot;Hunger&quot;</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function ucFirst(str)&#123;</div><div class="line">	return str[0].toUpperCase().concat(str.substring(1))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="写一个函数truncate-str-maxlength-如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如"><a href="#写一个函数truncate-str-maxlength-如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如" class="headerlink" title="写一个函数truncate(str, maxlength), 如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如"></a>写一个函数truncate(str, maxlength), 如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">truncate(&quot;hello, this is hunger valley,&quot;, 10)) == &quot;hello, thi...&quot;;</div><div class="line">truncate(&quot;hello world&quot;, 20)) == &quot;hello world&quot;</div></pre></td></tr></table></figure>
<p>实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function truncate(str, maxlength)&#123;</div><div class="line">	if(str.length&gt;maxlength)&#123;</div><div class="line">		return str.substring(0,maxlength).concat(&apos;...&apos;)</div><div class="line">	&#125;else&#123;</div><div class="line">		return str</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h1><h2 id="写一个函数，获取从min到max之间的随机整数，包括min不包括max"><a href="#写一个函数，获取从min到max之间的随机整数，包括min不包括max" class="headerlink" title="写一个函数，获取从min到max之间的随机整数，包括min不包括max"></a>写一个函数，获取从min到max之间的随机整数，包括min不包括max</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function getRandom(min,max)&#123;</div><div class="line">	return Math.floor(min+Math.random()*(max-min))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下:</p>
<p><img src="http://lilyzff.htmhub.com/images/math1.png" alt="math1.png"></p>
<h2 id="写一个函数，获取从min都max之间的随机整数，包括min包括max"><a href="#写一个函数，获取从min都max之间的随机整数，包括min包括max" class="headerlink" title="写一个函数，获取从min都max之间的随机整数，包括min包括max"></a>写一个函数，获取从min都max之间的随机整数，包括min包括max</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function getRandom(min,max)&#123;</div><div class="line">	return (min+Math.floor(Math.random()*(max-min+1)))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下:</p>
<p><img src="http://lilyzff.htmhub.com/images/math2.png" alt="math2.png"></p>
<h2 id="写一个函数，获取一个随机数组，数组中元素为长度为len，最小值为min，最大值为max-包括-的随机整数"><a href="#写一个函数，获取一个随机数组，数组中元素为长度为len，最小值为min，最大值为max-包括-的随机整数" class="headerlink" title="写一个函数，获取一个随机数组，数组中元素为长度为len，最小值为min，最大值为max(包括)的随机整数"></a>写一个函数，获取一个随机数组，数组中元素为长度为len，最小值为min，最大值为max(包括)的随机整数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function getRandomArr(min,max,len)&#123;</div><div class="line">	var arr=[];</div><div class="line">	for(var i=0;i&lt;len;i++)&#123;</div><div class="line">		arr[i]=min+Math.floor(Math.random()*(max-min+1))</div><div class="line">	&#125;</div><div class="line">	return arr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>输出结果如下:</p>
<p><img src="http://lilyzff.htmhub.com/images/math3.png" alt="math3.png"></p>
<h2 id="写一个函数，生成一个长度为-n-的随机字符串，字符串字符的取值范围包括0到9，a到-z，A到Z"><a href="#写一个函数，生成一个长度为-n-的随机字符串，字符串字符的取值范围包括0到9，a到-z，A到Z" class="headerlink" title="写一个函数，生成一个长度为 n 的随机字符串，字符串字符的取值范围包括0到9，a到 z，A到Z"></a>写一个函数，生成一个长度为 n 的随机字符串，字符串字符的取值范围包括0到9，a到 z，A到Z</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function getRandomStr(n)&#123;</div><div class="line">	var str=&apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;,</div><div class="line">	result=&apos;&apos;;</div><div class="line">	for(var i=0;i&lt;n;i++)&#123;</div><div class="line">		result+=str[Math.floor(Math.random()*str.length)]</div><div class="line">	&#125;</div><div class="line">	return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下:</p>
<p><img src="http://lilyzff.htmhub.com/images/math4.png" alt="math4.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基本概念]]></title>
      <url>http://lilyzff.htmhub.com/2016/08/29/JavaScript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<ol>
<li>CSS和JS在网页中的放置顺序是怎样的？</li>
<li>解释白屏和FOUC</li>
<li>async和defer的作用是什么？有什么区别</li>
<li>简述网页的渲染机制</li>
<li>JavaScript 定义了几种数据类型? 哪些是简单类型?哪些是复杂类型?</li>
<li>NaN、undefined、null分别代表什么?</li>
<li>typeof和instanceof的作用和区别?<a id="more"></a>
</li>
</ol>
<h1 id="JavaScript基本概念"><a href="#JavaScript基本概念" class="headerlink" title="JavaScript基本概念"></a>JavaScript基本概念</h1><h2 id="1-CSS和JS在网页中的放置顺序是怎样的？"><a href="#1-CSS和JS在网页中的放置顺序是怎样的？" class="headerlink" title="1.CSS和JS在网页中的放置顺序是怎样的？"></a>1.CSS和JS在网页中的放置顺序是怎样的？</h2><ul>
<li><strong>CSS放置在head标签之间，放在JS之前</strong>，因为如果把CSS放在后面，可能会出现白屏问题或者FOUC无样式内容闪烁的问题</li>
<li><strong>JS放置在body标签闭合之前</strong>，防止其阻塞后面内容的呈现和阻塞其后组件的下载<br><strong>原因：</strong>浏览器会按照从上到下的顺序解析文档内容，而且默认在解析到javascript代码时，其他文档无法加载或显示，只有等待javascript代码下载并执行完毕才能显示文档。</li>
</ul>
<h2 id="2、解释白屏和FOUC"><a href="#2、解释白屏和FOUC" class="headerlink" title="2、解释白屏和FOUC"></a>2、解释白屏和FOUC</h2><p><strong>白屏：</strong></p>
<ul>
<li>在IE浏览器当中，如果把样式放在底部，在一些场景当中，比如刷新页面、新窗口打开等，页面就会出现白屏，而不是内容逐步展现。</li>
<li>如果使用@import标签，即使CSS放入link当中且也放在头部，也有可能会出现白屏现象。</li>
<li>对于图片和CSS，在加载时会并发加载。然而在加载JS文件时会禁用并发，阻止其他内容的下载。所以把JS代码放在页面顶部也会造成白屏现象。</li>
</ul>
<p><strong>FOUC(Flash Of Unstyled Content)</strong>它指的是：逐步加载无样式的内容，等CSS加载完成后页面突然展现的样子。也就是说，浏览器加载了无样式内容，又突然解析到了样式，会对页面进行重新的渲染，这时候就会产生FOUC现象。在IE浏览器中，如果把样式放在底部，某些场景下（点击链接、输入URL、使用书签进入等等），就会出现FOUC现象。对于 Firefox 则会一直表现出 FOUC。</p>
<h2 id="3、async和defer的作用是什么？有什么区别"><a href="#3、async和defer的作用是什么？有什么区别" class="headerlink" title="3、async和defer的作用是什么？有什么区别"></a>3、async和defer的作用是什么？有什么区别</h2><p><strong>作用：</strong>async和defer是 <code>&lt;script&gt;</code> 标签的两个属性，用于指定脚本文件的加载方式。正常情况下，浏览器从上到下解析HTML文件，当解析到 <code>&lt;script&gt;</code> 标签的时候会立即下载脚本并执行，只有当加载执行脚本之后浏览器才能继续解析 <code>&lt;script&gt;</code> 标签之后的文档内容，而async和defer属性就是改变这种加载方式的作用。<br><strong>区别：</strong></p>
<ul>
<li><strong>async</strong>：表示应该立即下载脚本，不影响页面其他操作诸如其他脚本的下载， <code>async</code>属性会使加载和渲染文档元素的过程和JS脚本加载和执行并行进行（即异步）。<code>async</code> 只对外部脚本文件有效。 <code>async</code>不保证按照指定顺序执行JS脚本，第二个JS可能会比第一个JS文件先执行。所以多个JS文件若设置此属性应避免依赖。</li>
<li><strong>defer</strong>：表示脚本可以延迟到文档完全被解析之后再执行。只对外部脚本文件有效，IE7及更早版本对嵌入脚本也支持这个属性。<code>defer</code> 脚本延迟到文档完全解析渲染后按照顺序执行。<br>详细资料参考：<a href="http://ued.ctrip.com/blog/script-defer-and-async.html" target="_blank" rel="external">script的defer和async</a></li>
</ul>
<h2 id="4、简述网页的渲染机制"><a href="#4、简述网页的渲染机制" class="headerlink" title="4、简述网页的渲染机制"></a>4、简述网页的渲染机制</h2><ul>
<li>首先，渲染引擎首先通过网络获得所请求文档的内容;</li>
<li>渲染引擎在获得内容之后,<strong>解析HTML标签, 构建DOM树</strong>，将标签转化为内容树中的DOM节点；接着解析外部CSS文件及style标签中的样式信息为CSSOM树</li>
<li>把DOM和CSSOM组合成<strong> 渲染树 (render tree)</strong>。</li>
<li><strong>布局render树</strong>，在render树的基础上进行布局过程，它将确定每个节点在屏幕上的确切坐标</li>
<li><strong>绘制render树</strong>,遍历render树，并使用UI后端层绘制每个节点。即在渲染树的基础上进行布局, 计算每个节点的几何结构把每个节点绘制到屏幕上 (painting)<br>详细资料参考：<a href="http://kb.cnblogs.com/page/129756/" target="_blank" rel="external">浏览器内部工作原理</a></li>
</ul>
<h2 id="5、JavaScript-定义了几种数据类型-哪些是简单类型-哪些是复杂类型"><a href="#5、JavaScript-定义了几种数据类型-哪些是简单类型-哪些是复杂类型" class="headerlink" title="5、JavaScript 定义了几种数据类型? 哪些是简单类型?哪些是复杂类型?"></a>5、JavaScript 定义了几种数据类型? 哪些是简单类型?哪些是复杂类型?</h2><p>Javascript定义了5种简单数据类型，1种复杂数据类型</p>
<ul>
<li><strong>简单数据类型</strong><br>（1）、<strong>Undefined类型</strong>，Undefined 类型只有一个值，即特殊的undefined。在使用var 声明变量但未对其加以初始化时，这个变量的值就是undefined<br>（2）、<strong>Null 类型</strong>也是只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null 值表示一个空对象指针<br>（3）、<strong>Boolean类型</strong>，该类型只有两个字面值：true 和false。<br>（4）、<strong>Number类型</strong>,整数：十进制，八进制（0开头），十六进制（0x开头）；浮点数：带小数点的数;NaN（not a number）：意为非数值，但是其类型本身就是数值<br>（5）、<strong>String类型</strong>，String 类型用于表示由零或多个16 位Unicode 字符组成的字符序列，即字符串。</li>
<li><strong>复杂数据类型</strong><br><strong>object</strong>对象其实就是一组数据和功能的集合</li>
</ul>
<h2 id="6、NaN、undefined、null分别代表什么"><a href="#6、NaN、undefined、null分别代表什么" class="headerlink" title="6、NaN、undefined、null分别代表什么?"></a>6、NaN、undefined、null分别代表什么?</h2><p><strong>NaN</strong>，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。<br>NaN 本身有两个非同寻常的特点。首先，任何涉及NaN 的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN 与任何值都不相等，包括NaN 本身。<br><strong>undefined</strong>，在使用var 声明变量但未对其加以初始化时，这个变量的值就是undefined<br><strong>null</strong>值表示一个空对象指针，作为函数的参数，表示该函数的参数是一个没有任何内容的对象。作为对象原型链的终点。</p>
<h2 id="7、typeof和instanceof的作用和区别"><a href="#7、typeof和instanceof的作用和区别" class="headerlink" title="7、typeof和instanceof的作用和区别?"></a>7、typeof和instanceof的作用和区别?</h2><p><strong>typeof作用</strong>是检测变量的数据类型<br>下表总结了 typeof 可能的返回值</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>结构</th>
</tr>
</thead>
<tbody>
<tr>
<td>Undefined</td>
<td>“undefined”</td>
</tr>
<tr>
<td>Null</td>
<td>“object”</td>
</tr>
<tr>
<td>Boolean(布尔值)</td>
<td>“boolean”</td>
</tr>
<tr>
<td>Number(数值)</td>
<td>“number”</td>
</tr>
<tr>
<td>String(字符串)</td>
<td>“string”</td>
</tr>
<tr>
<td>Symbol (ECMAScript 6 新增)</td>
<td>“symbol”</td>
</tr>
<tr>
<td>函数对象 (implements [[Call]] in ECMA-262 terms)</td>
<td>“function”</td>
</tr>
<tr>
<td>任何其他对象</td>
<td>“object”</td>
</tr>
<tr>
<td>宿主对象(JS环境提供的，比如浏览器)</td>
<td><em>Implementation-dependent</em></td>
</tr>
</tbody>
</table>
<p>常规用法：</p>
<p><img src="http://lilyzff.htmhub.com/images/demo1.png" alt="demo1.png"><br><strong>instanceof</strong> 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。<br><strong>区别：</strong>typeof——确定一个值是哪种基本类型。instanceof——确定一个值是哪种引用类型。<br>参考资料：<a href="https://developer.mozilla.org/zhCN/docs/JavaScript/Reference/Operators/typeof" target="_blank" rel="external">typeof</a>、<a href="https://developer.mozilla.org/zhCN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="external">instanceof</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong> 1、完成如下代码判断一个变量是否是数字、字符串、布尔、函数 （难度*）</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">function isNumber(el)&#123;</div><div class="line">        if(typeof el===&quot;number&quot;)&#123;</div><div class="line">            return true;</div><div class="line">        &#125;else&#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">function isString(el)&#123;</div><div class="line">        if(typeof el===&quot;string&quot;)&#123;</div><div class="line">            return true;</div><div class="line">        &#125;else&#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    function isBoolean(el)&#123;</div><div class="line">        if(typeof el === &quot;boolean&quot;)&#123;</div><div class="line">            return true;</div><div class="line">        &#125;else&#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    function isFunction(el)&#123;</div><div class="line">        if(typeof el === &quot;function&quot;)&#123;</div><div class="line">            return true;</div><div class="line">        &#125;else&#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">var a = 2,</div><div class="line"> b = &quot;jirengu&quot;,</div><div class="line"> c = false;</div><div class="line">alert( isNumber(a) ); //true</div><div class="line">alert( isString(a) ); //false</div><div class="line">alert( isString(b) ); //true</div><div class="line">alert( isBoolean(c) ); //true</div><div class="line">alert( isFunction(a)); //false</div><div class="line">alert( isFunction( isNumber ) ); //true</div></pre></td></tr></table></figure>
<p><strong>2、以下代码的输出结果是?</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.log(1+1); //结果为2，数值之间的加法运算</div><div class="line">console.log(&quot;2&quot;+&quot;4&quot;);//结果为24，字符串之间的连接运算</div><div class="line">console.log(2+&quot;4&quot;); //结果为&quot;24&quot;，有一个运算子是字符串，则执行字符串连接运算。</div><div class="line">console.log(+new Date());//结果为1472452663049</div><div class="line">console.log(+&quot;4&quot;);//结果为4</div></pre></td></tr></table></figure>
<p><strong>3、以下代码的输出结果是?</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">a+++a;//结果是3</div><div class="line">typeof a+2;//结果是&quot;number2&quot;</div></pre></td></tr></table></figure>
<p>优先级判断参考：<a href="https://developer.mozilla.org/zhCN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">运算符优先级</a></p>
<p><strong>4、遍历数组，把数组里的打印数组每一项的平方 </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [3,4,5];</div><div class="line">for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">    console.log(arr[i]*arr[i])</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>5、遍历 JSON, 打印里面的值</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line"> name: &apos;hunger&apos;, </div><div class="line"> sex: &apos;male&apos;,</div><div class="line"> age: 28&#125;</div><div class="line"> for(i in obj)&#123;</div><div class="line">    console.log(obj[i]);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><img src="http://lilyzff.htmhub.com/images/demo3.png" alt="demo3.png"></p>
<p><strong>6、下面代码的输出是? 为什么</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(a);</div><div class="line">var a = 1;</div><div class="line">console.log(a);</div><div class="line">console.log(b);</div></pre></td></tr></table></figure>
<p><img src="http://lilyzff.htmhub.com/images/demo2.png" alt="demo2.png"><br><strong>原因：</strong>JavaScript变量会提升，第一个console.log(a)，变量a已经声明了，但是还未赋值，所以输出undefined，第二个console.log(a)里的变量a已经被赋值为1了，所以输出结果是1，最后一个console.log(b);变量b没有声明，所以报错了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[函数]]></title>
      <url>http://lilyzff.htmhub.com/2016/08/29/%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>1.函数声明和函数表达式有什么区别<br>2.什么是变量的声明前置？什么是函数的声明前置<br>3.arguments 是什么<br>4.函数的重载怎样实现<br>5.立即执行函数表达式是什么？有什么作用<br>6.什么是函数的作用域链<br><a id="more"></a></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="1、函数声明和函数表达式有什么区别"><a href="#1、函数声明和函数表达式有什么区别" class="headerlink" title="1、函数声明和函数表达式有什么区别"></a>1、函数声明和函数表达式有什么区别</h2><p>函数声明例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(sum(10,10));</div><div class="line">function sum(num1, num2)&#123;</div><div class="line">      return num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数表达式例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(sum(10,10));</div><div class="line">var sum = function(num1, num2)&#123;</div><div class="line">      return num1 + num2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>运行后的结果分别为</p>
<p><img src="http://lilyzff.htmhub.com/images/hoisting.png" alt="hoisting.png"></p>
<p><img src="http://lilyzff.htmhub.com/images/expression.png" alt="Expression.png"></p>
<p>以上可以看出，即使声明函数的代码在调用它的代码后面，也能正常运行，但是函数表达式就不可以。因为在代码开始执行之前，解析器就已经通过一个名为<strong>函数声明提升</strong>（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript引擎在第一遍会声明函数并将它们放到源代码树的顶部。至于<strong>函数表达式</strong>，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。</p>
<h2 id="2、什么是变量的声明前置？什么是函数的声明前置"><a href="#2、什么是变量的声明前置？什么是函数的声明前置" class="headerlink" title="2、什么是变量的声明前置？什么是函数的声明前置"></a>2、什么是变量的声明前置？什么是函数的声明前置</h2><p><strong>变量的声明前置</strong>是JavaScript将声明移至作用域 <a href="https://developer.mozilla.org/en-US/docs/Glossary/scope" target="_blank" rel="external">scope</a> (全局域或者当前函数作用域) 顶部的行为。意味着我们可以在声明一个函数或变量之前引用它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(a);//不会报错，只会输出undefined，因为变量声明提升了</div><div class="line">var a;</div><div class="line">console.log(b);//会报错，因为变量b还没声明</div></pre></td></tr></table></figure></p>
<p><strong>函数的声明前置</strong>见上一题。<br>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting" target="_blank" rel="external">变量提升</a></p>
<h2 id="3、arguments-是什么？"><a href="#3、arguments-是什么？" class="headerlink" title="3、arguments 是什么？"></a>3、arguments 是什么？</h2><p><strong>arguments</strong>对象是函数内部的本地变量,是一个类数组对象；arguments 已经不再是函数的属性了。<br>可以在函数内部通过使用 arguments 对象来获取函数的所有参数，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function arg()&#123;</div><div class="line">		console.log(arguments[0]);</div><div class="line">		console.log(arguments[1]);</div><div class="line">		console.log(arguments[2]);</div><div class="line">	&#125;</div><div class="line">	arg(&apos;score&apos;,&apos;variable&apos;,&apos;hoist&apos;)</div></pre></td></tr></table></figure></p>
<p>显示结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/arguments1.png" alt="arguments1.png"></p>
<p>arguments 对象并不是一个真正的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="external">Array</a>。它类似于数组，但没有数组所特有的属性和方法，除了 <a href="https://developer.mozilla.org/enUS/docs/Web/JavaScript/Reference/Functions/arguments/length" target="_blank" rel="external">length</a><br>通过访问arguments对象的length属性可以获知有多少个参数传递给了函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function Arglength()&#123;</div><div class="line">		console.log(arguments.length)</div><div class="line">	&#125;</div><div class="line">	Arglength(&apos;hello&apos;,1,2,3);</div><div class="line">	Arglength(1,2,3);</div><div class="line">	Arglength(1,2);</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<p><img src="http://lilyzff.htmhub.com/images/arguments2.png" alt="arguments2.png"></p>
<h2 id="4、函数的重载怎样实现"><a href="#4、函数的重载怎样实现" class="headerlink" title="4、函数的重载怎样实现"></a>4、函数的重载怎样实现</h2><p><strong>重载</strong>是很多面向对象语言实现多态的手段之一，在静态语言中确定一个函数的手段是靠方法签名——函数名+参数列表，也就是说相同名字的函数参数个数不同或者顺序不同都被认为是不同的函数，称为函数重载<br>在JavaScript中没有函数重载的概念，函数通过名字确定唯一性，参数不同也被认为是相同的函数，后面的覆盖前面的<br>在Javascript中可以通过<strong>arguments</strong>来实现函数的重载，如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function sum()&#123;</div><div class="line">		var x=0;</div><div class="line">		for(var i=0;i&lt; arguments.length;i++)&#123;</div><div class="line">			x+=arguments[i];</div><div class="line">		&#125;</div><div class="line">		return x;</div><div class="line">	&#125;</div><div class="line">	console.log(sum(1,2));//输出结果为3</div><div class="line">        console.log(sum(&apos;hello&apos;,2016.9));//输出结果为0hello2016.9</div></pre></td></tr></table></figure></p>
<h2 id="5、立即执行函数表达式是什么？有什么作用"><a href="#5、立即执行函数表达式是什么？有什么作用" class="headerlink" title="5、立即执行函数表达式是什么？有什么作用"></a>5、立即执行函数表达式是什么？有什么作用</h2><blockquote>
<p>立即执行函数，<strong>IIFE </strong>(Immediately Invoked Function Expression) 是一个 <a href="https://developer.mozilla.org/en-US/docs/Glossary/JavaScript" target="_blank" rel="external">JavaScript</a> <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E5%87%BD%E6%95%B0" target="_blank" rel="external">函数</a> ，它会在定义时立即执行。</p>
</blockquote>
<p><strong>立即执行函数表达式：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(function foo()&#123;</div><div class="line">		console.log(&apos;我是立即执行函数&apos;)</div><div class="line">	&#125;)()；</div><div class="line">(function()&#123;</div><div class="line">		console.log(&apos;我也是立即执行函数&apos;)</div><div class="line">	&#125;());</div></pre></td></tr></table></figure></p>
<p><strong>作用：</strong><br>1.可以封装大量的工作而不会在背后遗留任何全局变量；<br>2.定义的所有变量都会成为立即执行函数的局部变量，所以不用担心这些临时变量会污染全局空间；<br>3.可以将独立的功能封装在自包含模块中<br>4.模拟块作用域 、模拟单例、可以解决闭包冲突<br>参考资料：<a href="http://weizhifeng.net/immediately-invoked-function-expression.html" target="_blank" rel="external">JavaScript中的立即执行函数表达式</a>、<a href="http://www.cnblogs.com/lodingzone/p/5341143.html" target="_blank" rel="external">js立即执行函数</a></p>
<h2 id="6-什么是函数的作用域链？"><a href="#6-什么是函数的作用域链？" class="headerlink" title="6.什么是函数的作用域链？"></a>6.什么是函数的作用域链？</h2><blockquote>
<p>每个函数都有自己的执行环境，当代码在一个环境中执行时，会创建变量对象的一个<strong>作用域链（scope chain）</strong>。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p>
</blockquote>
<p>参考资料：<a href="http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html" target="_blank" rel="external">JavaScript 开发进阶：理解 JavaScript 作用域和作用域链</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><strong>1.以下代码输出什么？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function getInfo(name, age, sex)&#123;</div><div class="line">     console.log(&apos;name:&apos;,name); </div><div class="line">     console.log(&apos;age:&apos;, age); </div><div class="line">     console.log(&apos;sex:&apos;, sex); </div><div class="line">     console.log(arguments);</div><div class="line">     arguments[0] = &apos;valley&apos;; </div><div class="line">     console.log(&apos;name&apos;, name); </div><div class="line">&#125;</div><div class="line"> getInfo(&apos;hunger&apos;, 28, &apos;男&apos;);</div><div class="line"> getInfo(&apos;hunger&apos;, 28); </div><div class="line"> getInfo(&apos;男&apos;);</div></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<p><img src="http://lilyzff.htmhub.com/images/output1.png" alt="output1.png"></p>
<p><strong>2.写一个函数，返回参数的平方和？如</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function sumOfSquares()&#123;</div><div class="line">&#125;</div><div class="line">sumOfSquares(2,3,4); </div><div class="line">sumOfSquares(1,3);</div></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<p><img src="http://lilyzff.htmhub.com/images/output2.png" alt="output2.png"></p>
<p><strong>3.如下代码的输出？为什么 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(a);//输出undefined，因为变量a提升了，但是没有赋值</div><div class="line"> var a = 1; </div><div class="line">console.log(b);//输出 b is not defined(…)，因为变量b没有申明</div></pre></td></tr></table></figure></p>
<p><strong>4.如下代码的输出？为什么</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sayName(&apos;world&apos;);//输出结果为hello  world，因为函数声明提升</div><div class="line">sayAge(10);//输出结果为sayAge is not a function(…)，因为它是一个函数表达式，不会函数声明提升</div><div class="line">function sayName(name)&#123; </div><div class="line">        console.log(&apos;hello &apos;, name);</div><div class="line">&#125;</div><div class="line">var sayAge = function(age)&#123; </div><div class="line">        console.log(age);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>5.如下代码的输出？为什么 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function fn()&#123;&#125; </div><div class="line">var fn = 3;</div><div class="line">console.log(fn);//输出3，因为在同一个作用域内定义了名字相同的变量和方法的话，无论其顺序如何，变量的赋值会覆盖方法的赋值</div></pre></td></tr></table></figure></p>
<p><strong>6.如下代码的输出？为什么 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> function fn(fn2)&#123; </div><div class="line">    console.log(fn2);</div><div class="line">    var fn2 = 3;</div><div class="line">    console.log(fn2); </div><div class="line">    console.log(fn);</div><div class="line">    function fn2()&#123; </div><div class="line">    console.log(&apos;fnnn2&apos;); </div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line">fn(10);</div></pre></td></tr></table></figure></p>
<p>上述代码相当于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  function fn(fn2)&#123;</div><div class="line">   	var fn2;</div><div class="line">   	function fn2()&#123;</div><div class="line">            console.log(&apos;fnnn2&apos;);</div><div class="line">        &#125;</div><div class="line">    console.log(fn2);/* 当函数执行命名有冲突时，函数载入的顺序是变量&gt;函数&gt;参数，此时肯定是输出函数的 */</div><div class="line">    fn2=3;</div><div class="line">    console.log(fn2);//3</div><div class="line">/*此时fn2被赋值3了，因为在同一个作用域中，定义了同一个名字的变量和方法时，无论顺序如何，变量的赋值会覆盖方法的赋值*/</div><div class="line">    console.log(fn);// 此时会打印函数fn本身</div><div class="line">   &#125; </div><div class="line">   fn(10);</div></pre></td></tr></table></figure></p>
<p>所以输出结果为：</p>
<p><img src="http://lilyzff.htmhub.com/images/output3.png" alt="output3.png"></p>
<p><strong>7.如下代码的输出？为什么</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var fn = 1;</div><div class="line"> function fn(fn)&#123; </div><div class="line">     console.log(fn);</div><div class="line"> &#125;</div><div class="line"> console.log(fn(fn));</div></pre></td></tr></table></figure>
<p>上述代码相当于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var fn;</div><div class="line"> function fn(fn)&#123; </div><div class="line">     console.log(fn);</div><div class="line"> &#125;</div><div class="line"> fn = 1</div><div class="line"> console.log(fn(fn));//报错fn is not a function(…)</div><div class="line">/* 由于同一个作用域中，定义同一个名字的变量和方法时，变量赋值会覆盖方法的赋值，因此此时解析器并不能够识别fn为函数，但是在打印时又以函数的方式打印，因此会报错*/</div></pre></td></tr></table></figure></p>
<p><strong>8.如下代码的输出？为什么 </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">console.log(j);</div><div class="line">console.log(i); </div><div class="line">for(var i=0; i&lt;10; i++)&#123;</div><div class="line"> var j = 100;</div><div class="line"> &#125;</div><div class="line"> console.log(i);</div><div class="line"> console.log(j);</div></pre></td></tr></table></figure>
<p>输出结果为：</p>
<p><img src="http://lilyzff.htmhub.com/images/output4.png" alt="output4.png"><br>原因：for是循环语句，不是函数，所以其不会前置，其定义的变量自然就是全局变量，所以能够被解析，正常顺序执行并显示。</p>
<p><strong>9.如下代码的输出？为什么</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">fn();</div><div class="line">    var i = 10;</div><div class="line">    var fn = 20;</div><div class="line">    console.log(i);</div><div class="line">    function fn()&#123;</div><div class="line">        console.log(i);</div><div class="line">        var i = 99;</div><div class="line">        fn2();</div><div class="line">        console.log(i);</div><div class="line">        function fn2()&#123;</div><div class="line">            i = 100;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上述代码相当于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var i;</div><div class="line">    var fn;</div><div class="line">    function fn()&#123;</div><div class="line">    	var i;</div><div class="line">    	function fn2()&#123;</div><div class="line">            i = 100;</div><div class="line">        &#125;</div><div class="line">        console.log(i);//输出undefined，因为i声明了还没有赋值</div><div class="line">        i = 99;</div><div class="line">        fn2();//执行后i为100</div><div class="line">        console.log(i);//输出100</div><div class="line">    &#125;</div><div class="line">    fn();</div><div class="line">    i = 10;</div><div class="line">    fn = 20;</div><div class="line">    console.log(i);//输出10</div><div class="line">/*虽然i在function内部为100但由于函数作用域的存在及i的外部赋值，在外部的为10；*/</div></pre></td></tr></table></figure></p>
<p><strong>10.如下代码的输出？为什么</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    var say = 0;</div><div class="line">    (function say(n)&#123;</div><div class="line">        console.log(n);</div><div class="line">        if(n&lt;3) return;</div><div class="line">        say(n-1);</div><div class="line">    &#125;( 10 ));//输出10,9,8,7,6,5,4,3,2</div><div class="line">/*该函数为立即执行函数，因此会马上执行，当n为2时，因为2&lt;3，因此会立即跳出该函数*/</div><div class="line">    console.log(say);//输出0</div><div class="line">/*因为在该作用域中，变量say已经被赋值了0，在同一个作用域中，变量和方法同名时，无论顺序如何，变量的赋值会覆盖方法的赋值，更何况say（）为立即执行函数；*/</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://lilyzff.htmhub.com/2016/08/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浏览器兼容]]></title>
      <url>http://lilyzff.htmhub.com/2016/08/25/task13/</url>
      <content type="html"><![CDATA[<ol>
<li>如何调试 IE 浏览器</li>
<li>什么是CSS hack？在 CSS 和 HTML里如何写 hack？在 CSS 中 ie6、ie7的 hack 方式？</li>
<li>列举几种 浏览器兼容问题</li>
<li>针对兼容、多浏览器覆盖有什么看法？渐进增强和优雅降级是什么意思？</li>
<li><code>reset.css</code>和<code>normalize.css</code>分别是做什么的？为什么推荐使用 <code>nomalize.css</code>?</li>
<li>IE盒模型和标准盒模型有什么区别? 怎样使 IE678使用标准盒模型?<code>box-sizing:border-box</code>有什么作用<a id="more"></a>
</li>
</ol>
<h1 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h1><h2 id="1-如何调试-IE-浏览器？"><a href="#1-如何调试-IE-浏览器？" class="headerlink" title="1.如何调试 IE 浏览器？"></a>1.如何调试 IE 浏览器？</h2><p>（1）、IE7及以上版本有调试台，可以按F12启动：<br>优点：权威；缺点：不方便，正常情况下只能安装一个版本IE。<br>（2）、模拟器模拟不同版本IE，微软官方有诸如virtual pc、Expression Web SuperPreview等<br>优点：集成需要的所有版本IE；缺点：效果是模拟出来的，权威性不足。</p>
<p><img src="http://lilyzff.htmhub.com/images/ietest.png" alt="IETester.png"><br>（3）、虚拟机，安装带有不同版本IE的系统：<br>优点：权威，而且多版本均能调试；缺点：占空间，占内存，但是不太影响使用。</p>
<h2 id="2-什么是CSS-hack？在-CSS-和-HTML里如何写-hack？在-CSS-中-ie6、ie7的-hack-方式？"><a href="#2-什么是CSS-hack？在-CSS-和-HTML里如何写-hack？在-CSS-中-ie6、ie7的-hack-方式？" class="headerlink" title="2.什么是CSS hack？在 CSS 和 HTML里如何写 hack？在 CSS 中 ie6、ie7的 hack 方式？"></a>2.什么是CSS hack？在 CSS 和 HTML里如何写 hack？在 CSS 中 ie6、ie7的 hack 方式？</h2><ul>
<li><strong>CSS hack</strong>由于不同厂商的浏览器，比如Internet Explorer,Safari,Mozilla Firefox,Chrome等，或者是同一厂商的浏览器的不同版本，如IE6和IE7，对CSS的解析认识不完全一样，因此会导致生成的页面效果不一样，得不到我们所需要的页面效果。这时我们为了获得一致的CSS效果，就利用一些BUG或者特定样式去达到一样的效果，这个coding过程，我们称之为CSS hack。</li>
<li><strong>在 CSS 和 HTML里如何写 hack：</strong>CSS Hack大致有3种表现形式，<strong>CSS属性前缀法</strong>、<strong>选择器前缀法</strong>以及<strong>IE条件注释法</strong>（即HTML头部引用if IE）Hack，实际项目中CSS Hack大部分是针对IE浏览器不同版本之间的表现差异而引入的。<br><strong>1、CSS属性前缀法:</strong>由于IE发展较早，早期版本对于CSS的解析有部分没加严格限制，成为了历史遗留问题，利用这些BUG可以对某些CSS属性写CSS hack以达到效果</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.hack &#123;</div><div class="line"> color: silver; /* 所有浏览器 */</div><div class="line"> color: yellow !important; /* 除IE6外所有浏览器 */ </div><div class="line">*color: red; /* IE6,IE7 */ </div><div class="line">+color: green; /* IE6,IE7 */</div><div class="line"> _color: blue; /* 只有IE6 */</div><div class="line"> color: gray\9; /* IE6,IE7,IE8,IE9,IE10 */</div><div class="line"> color: pink\0; /* IE8,IE9,IE10 */</div><div class="line"> color: purple\9\0; /* IE9,IE10 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2、选择器前缀法：</strong>选择器前缀法是针对一些页面表现不一致或者需要特殊对待的浏览器，在CSS选择器前加上一些只有某些特定浏览器才能识别的前缀进行hack。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*<span class="selector-tag">html</span> <span class="selector-id">#selector</span> &#123;&#125; <span class="comment">/* 只对IE6生效 */</span></div><div class="line"> *+<span class="selector-tag">html</span> <span class="selector-id">#selector</span> &#123;&#125; <span class="comment">/* 只对IE7生效 */</span></div><div class="line"> @<span class="keyword">media</span> screen\<span class="number">9</span> &#123; <span class="selector-class">.selector</span> &#123; <span class="attribute">property</span>: value; &#125; &#125; <span class="comment">/* 只对IE6、7生效 */</span></div><div class="line"> @<span class="keyword">media</span> \<span class="number">0s</span>creen &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: red; &#125;&#125; <span class="comment">/* 只对IE8生效 */</span></div><div class="line"> @<span class="keyword">media</span> \<span class="number">0s</span>creen\,screen\<span class="number">9</span>&#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: blue; &#125;&#125; <span class="comment">/* 只对IE6，IE7，IE8有效 */</span></div><div class="line"> @<span class="keyword">media</span> screen\<span class="number">0</span> &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: green; &#125;&#125; <span class="comment">/* 只对IE8，IE9，IE10生效 */</span></div><div class="line"> @<span class="keyword">media</span> screen and (min-width:<span class="number">0</span>\<span class="number">0</span>) &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: gray; &#125;&#125; <span class="comment">/* 只对IE9，IE10生效 */</span></div></pre></td></tr></table></figure>
<p><strong>3、IE条件注释法（即HTML条件注释hack）：</strong>（注：IE10+已经不再支持条件注释）这类hack不仅对CSS生效，对写在判断语句里面的所有代码都会生效<br>只在IE下显示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE]&gt;</span></div><div class="line"> &lt;p&gt;这段代码只有IE浏览器识别&lt;/p&gt;</div><div class="line">&lt;![endif]--&gt;</div><div class="line">``` </div><div class="line"></div><div class="line">只在IE6显示：</div><div class="line"></div><div class="line">```  html</div><div class="line"><span class="comment">&lt;!--[if IE 6]&gt; </span></div><div class="line">&lt;p&gt;这段文字只在IE6浏览器显示&lt;/p&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p>只在IE6以上版本显示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if gte IE 6]&gt;</span></div><div class="line">&lt;p&gt;这段文字只在IE6及以上版本IE浏览器显示&lt;/p&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p>只在IE8上不生效：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if ! IE 8 ]&gt;</span></div><div class="line">&lt;p&gt;如果不是IE8，则生效&lt;/p&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p>非IE生效：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if ! IE]&gt;</span></div><div class="line">&lt;p&gt;如果不是IE，则生效&lt;/p&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>在 CSS 中 ie6、ie7的 hack 方式：</strong></li>
</ul>
<p>属性前缀法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box&#123; *color: red; /* IE6,IE7 */  &#125;</div><div class="line">``` </div><div class="line"></div><div class="line"></div><div class="line">选择器前缀法</div><div class="line"></div><div class="line">``` css</div><div class="line">@media screen\9 &#123; .selector &#123; property: value; &#125; &#125; /* 只对IE6、7生效 */</div></pre></td></tr></table></figure>
<p>IE条件注释法</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if gte IE 6]&gt;</span></div><div class="line">&lt;p&gt;这段文字只在IE6及以上版本IE浏览器显示&lt;/p&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/freshlover/article/details/12132801" target="_blank" rel="external">史上最全的CSS hack方式一览</a></p>
<h2 id="3、列举几种浏览器兼容问题"><a href="#3、列举几种浏览器兼容问题" class="headerlink" title="3、列举几种浏览器兼容问题"></a>3、列举几种浏览器兼容问题</h2><ul>
<li><strong>不同浏览器的标签默认的margin和padding不同</strong><br>解决方法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>min-height（min-width、max-width、max-height）</strong><br>方法一：利用IE6不识别!important来实现：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.selector</span> &#123; </div><div class="line"><span class="attribute">height</span>:auto <span class="meta">!important</span>; </div><div class="line"><span class="attribute">height</span>:<span class="number">100px</span>; </div><div class="line"><span class="attribute">min-height</span>:<span class="number">100px</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>方法二：overflow:visible属性实现：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.selector</span> &#123; </div><div class="line"><span class="attribute">min-height</span>:<span class="number">100px</span>; </div><div class="line"><span class="attribute">_height</span>:<span class="number">100px</span>;</div><div class="line"> <span class="attribute">overflow</span>:visible; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>透明度(IE8及以下版本不支持opacity属性，可使用filter:alpha(opacity=50)替代：)</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123; </div><div class="line"><span class="attribute">background</span>: red;</div><div class="line"> <span class="attribute">opacity</span>: <span class="number">0.5</span>; </div><div class="line"><span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=50); <span class="comment">/* 兼容IE8即一下 */</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>inline-block</strong>对于IE6、IE7并不支持，解决方法是优雅降级，将display属性值在IE6、7下写为display: inline</li>
</ul>
<p>解决方式一</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*<span class="selector-tag">display</span>: <span class="selector-tag">inline</span>; <span class="comment">/* 将块级元素设置为内联对象呈递。*/</span></div><div class="line">*<span class="selector-tag">zoom</span>: 1; <span class="comment">/* 触发haslayout */</span></div></pre></td></tr></table></figure>
<p>解决方式二</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">div&#123; </div><div class="line">display: inline-block; </div><div class="line">*display: inline; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4、针对兼容、多浏览器覆盖有什么看法？渐进增强和优雅降级是什么意思？"><a href="#4、针对兼容、多浏览器覆盖有什么看法？渐进增强和优雅降级是什么意思？" class="headerlink" title="4、针对兼容、多浏览器覆盖有什么看法？渐进增强和优雅降级是什么意思？"></a>4、针对兼容、多浏览器覆盖有什么看法？<strong>渐进增强</strong>和<strong>优雅降级</strong>是什么意思？</h2><ul>
<li>CSS作为一种语言，设计成有很强的向前兼容性，无论是浏览器覆盖还是兼容都是解决bug的很好的方式，但是不应该过分信赖于hack和过滤器，因为并非掌握hack越多，自己的水平就越高。各个浏览器，各个版本，以及各个网页html千差万别，动一发则牵全身，所以要明智且受控制地应用hack和过滤器。之所以这么说，是因为如果CSS文件短小且简单，并且只需要应用很少个hack的话，那么放在主CSS文件中加以注释说明可能是安全的；但是之前说过，hack往往过于复杂，使代码很难阅读，所以最好将他们放在他们自己的样式表中，不但容易阅读，而且便于维护。但是这样就增加了工作量，所以建议还是少用hack和过滤器，能不兼容的地方就不兼容，考虑业务需求的情况下合理使用兼容。而至于多浏览器覆盖，我认为这个是可以合理考虑的，而且经常用也未尝不可，毕竟各大浏览器用户所占份额均不小 ，这点不容忽视。</li>
<li><strong>渐进增强：</strong>针对低版本浏览器进行构建页面，保证最基本的功能，然后在针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li>
<li><strong>优雅降级：</strong>一开始就针对高版本浏览器进行页面构建，然后再针对低版本浏览器进行兼容。<br><strong>区别：</strong>优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。<br><strong>使用策略：</strong>也许有各种fallback方案可以保证完全兼容性各个浏览器，但依然不能保证低端浏览器的使用体验，顶多是看起来各个浏览器都一样了。因此，现在的设计和开发的策略是浏览器分级支持。优先为高端浏览器设计，同时考虑低端浏览器的退化方案。甚至有些复杂的应用可以拒绝ie6，提示用户使用高端浏览器。<br>参考：<a href="http://www.cnblogs.com/mofish/p/3822879.html" target="_blank" rel="external">优雅降级和渐进增强的区别</a></li>
</ul>
<h2 id="5、reset-css和normalize-css分别是做什么的？为什么推荐使用-nomalize-css"><a href="#5、reset-css和normalize-css分别是做什么的？为什么推荐使用-nomalize-css" class="headerlink" title="5、reset.css和normalize.css分别是做什么的？为什么推荐使用 nomalize.css?"></a>5、reset.css和normalize.css分别是做什么的？为什么推荐使用 nomalize.css?</h2><ul>
<li><strong>reset.css</strong>：是通过重新定义标签样式，把浏览器的默认样式覆盖掉，以便保持个浏览器渲染的一致性。</li>
<li><strong>normalize.css</strong>：是reset.css的替代方案，保护有用的浏览器默认样式，修改浏览器自身bug，优化可用性。</li>
<li><strong>为什么推荐使用 nomalize.css：</strong>Normalize 相对「平和」，注重通用的方案，重置掉该重置的样式，保留有用的 user agent 样式，同时进行一些 bug 的修复，这点是 reset 所缺乏的；Reset 相对「暴力」，不管你有没有用，统统重置成一样的效果，且影响的范围很大，讲求跨浏览器的一致性。</li>
<li><strong>其他：</strong><br>（1）、Normalize.css 保护了有价值的默认值；reset通过为几乎所有的元素施加默认样式，强行使得元素有相同的视觉效果。相比之下，Normalize.css保持了许多默认的浏览器样式。这就意味着你不用再为所有公共的排版元素重新设置样式。当一个元素在不同的浏览器中有不同的默认值时，Normalize.css会力求让这些样式保持一致并尽可能与现代标准相符合。<br>（2）、Normalize.css 修复了浏览器的bug；它修复了常见的桌面端和移动端浏览器的bug。这往往超出了Reset所能做到的范畴。关于这一点，Normalize.css修复的问题包含了HTML5元素的显示设置、预格式化文字的font-size问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。<br>（3）、Normalize.css 不会让调试工具变的杂乱；使用Reset最让人困扰的地方莫过于在浏览器调试工具中大段大段的继承链。在Normalize.css中就不会有这样的问题，因为在我们的准则中对多选择器的使用时非常谨慎的，我们仅会有目的地对目标元素设置样式。<br>（4）、Normalize.css 是模块化的；这个项目已经被拆分为多个相关却又独立的部分，这使得你能够很容易也很清楚地知道哪些元素被设置了特定的值。因此这能让你自己选择性地移除掉某些永远不会用到部分（比如表单的一般化）。<br>（5）、Normalize.css 拥有详细的文档；Normalize.css的代码基于详细而全面的跨浏览器研究与测试。这个文件中拥有详细的代码说明并在<a href="https://github.com/necolas/normalize.css/wiki" target="_blank" rel="external">Github Wiki</a>中有进一步的说明。这意味着你可以找到每一行代码具体完成了什么工作、为什么要写这句代码、浏览器之间的差异，并且你可以更容易地进行自己的测试。</li>
</ul>
<h2 id="6、IE盒模型和标准盒模型有什么区别-怎样使-IE678使用标准盒模型-box-sizing-border-box有什么作用"><a href="#6、IE盒模型和标准盒模型有什么区别-怎样使-IE678使用标准盒模型-box-sizing-border-box有什么作用" class="headerlink" title="6、IE盒模型和标准盒模型有什么区别? 怎样使 IE678使用标准盒模型?box-sizing:border-box有什么作用"></a>6、IE盒模型和标准盒模型有什么区别? 怎样使 IE678使用标准盒模型?box-sizing:border-box有什么作用</h2><ul>
<li><strong>区别：</strong>W3C标准盒子模型padding、border所占的空间不在width、height范围内，大家俗称的IE的盒模型width包括content尺寸＋padding＋border；</li>
<li>IE678不添加doctype声明时（怪异模式）使用IE盒模型，要想使IE678使用标准盒模型，给IE678添加doctype变为标准模式即可。</li>
<li><strong>box-sizing:border-box</strong>作用是为元素设定的任何内边距及边框均在设定的宽度和高度中进行绘制，也就是 所有元素输入的height及width数值即为content+padding+border的height及width的数值），这样可方便计算</li>
</ul>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://lilyzff.htmhub.com/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[404 Not Found：该页无法显示]]></title>
      <url>http://lilyzff.htmhub.com//404.html</url>
      <content type="html"><![CDATA[<style type="text/css">
    .article-header {
            padding: 0;
                    padding-top: 26px;
                            border-left: none;
                                    text-align: center;
                                        }
                                            .article-header:hover {
                                                    border-left: none;
                                                        }
                                                            .article-title {
                                                                    font-size: 2.1em;
                                                                        }
                                                                            strong a {
                                                                                    color: #747474;
                                                                                        }
                                                                                            .article-meta {
                                                                                                    display: none;
                                                                                                        }
                                                                                                            .share {
                                                                                                                    display: none;
                                                                                                                        }
                                                                                                                            .ds-meta {
                                                                                                                                    display: none;
                                                                                                                                        }
                                                                                                                                            .player {
                                                                                                                                                    margin-left: -10px;
                                                                                                                                                        }
                                                                                                                                                            .sign {
                                                                                                                                                                    text-align: right;
                                                                                                                                                                            font-style: italic;
                                                                                                                                                                                }
                                                                                                                                                                                      #page-visit {
                                                                                                                                                                                            display: none;
                                                                                                                                                                                                }
                                                                                                                                                                                                    .center {
                                                                                                                                                                                                            text-align: center;
                                                                                                                                                                                                                    height: 2.5em;
                                                                                                                                                                                                                            font-weight: bold;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                    .article-entry hr {
                                                                                                                                                                                                                                            margin: 0;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                    .pic {
                                                                                                                                                                                                                                                            text-align: center;
                                                                                                                                                                                                                                                                    margin: 0;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                            .pic br {
                                                                                                                                                                                                                                                                                      display: none;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                            #container .article-info-post.article-info {
                                                                                                                                                                                                                                                                                                  display: none;
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                        #container .article .article-title {
                                                                                                                                                                                                                                                                                                            padding: 0;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                </style>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://lilyzff.htmhub.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
